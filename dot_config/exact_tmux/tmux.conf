#
# Tmux Configuration
#

# Plugins {{{1
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-sessionist'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-yank'

if "test ! -d #{d:current_file}/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm #{d:current_file}/plugins/tpm && #{d:current_file}/plugins/tpm/bin/install_plugins'"
run "#{d:current_file}/plugins/tpm/tpm"
# Options {{{1
# Styles {{{2
set -g copy-mode-match-style 'bg=colour3 fg=colour0'
set -g copy-mode-mark-style 'bg=colour4 fg=colour7'
set -g copy-mode-current-match-style 'bg=colour1 fg=colour7'
set -g cursor-style blinking-block
set -g display-panes-active-colour 'colour1'
set -g display-panes-color 'colour4'
set -g menu-border-style 'fg=colour5'
set -g menu-selected-style "fg=colour0 bg=colour2"
set -g message-command-style "bg=terminal fg=colour4 bold italics"
set -g message-style "bg=colour4 fg=colour7 bold"
set -g mode-style 'bg=colour11 fg=colour0'
set -g pane-active-border-style "fg=colour11"
set -g pane-border-style "fg=colour0"
set -g popup-border-style "fg=colour13"
set -g status-style "bg=terminal fg=colour8"
set -g status-left-style "fg=colour4"
set -g window-active-style 'bg=terminal'
set -g window-style 'bg=colour0'
set -g window-status-current-style "fg=colour12"
set -g window-status-last-style "fg=colour7"
set -g window-status-style "fg=colour8"

# Formats {{{2
# set -g automatic-rename-format "#{?pane_in_mode,[tmux],󰎔}"
# Status Bar {{{2
# Line 1 {{{3
# Status Left
set -g status-left "#[bg=colour4 fg=colour7 bold]  #S:#{s|$HOME|~|:session_path}#{?session_alerts, #{session_alerts},}#[default]"

# Window Status
set -g window-status-current-format "#{?window_start_flag,, }#[reverse]󰓫 #I:#W#{?#F, #F,}#[noreverse]#{?window_end_flag,, }"
set -g window-status-format "#{?window_start_flag,, }󰓫 #I:#W#{?#F, #F,}#{?window_end_flag,, }"
set -g window-status-separator ''

# Status Right
set -g status-right ''
set -ga status-right "#{P: "
set -ga status-right "#[range=pane|#{pane_id}]"
set -ga status-right "#{?pane_active,#[bold fg=#{?window_zoomed_flag,colour13,colour5}]#[reverse],#{?pane_last,#[fg=colour7],}}"
set -ga status-right " #P"
set -ga status-right ":#{?#{==:#{pane_title},#{host}},#[italics]#{pane_current_command}#[noitalics],#{pane_title}}"
# set -ga status-right "#{s|$HOME|~|:pane_current_path}"
set -ga status-right "#[noreverse]#{?pane_active,,} #[range=right default]#{?#{==:#{window_panes},#{pane_index}},,#{E:window-status-separator}}}"
# Line 2 {{{3
set -g status-format[1] ''
set -ga status-format[1] " #[fg=colour14]  #{s|$HOME|~|:pane_current_path}#[default]"
set -ga status-format[1] '#[align=absolute-centre]'
set -ga status-format[1] ' #[fg=colour2] #[fg=default]#{host}'
set -ga status-format[1] ' #{window-status-separator} '
set -ga status-format[1] ' #[fg=colour3]  #[fg=default]%Y-%m-%d'
set -ga status-format[1] ' #{window-status-separator} '
set -ga status-format[1] '#[fg=colour9] #[fg=default] %H:%M'
set -ga status-format[1] '#[align=right]'
set -ga status-format[1] '#{?client_prefix,#[fg=colour1]#[reverse]󰧹 <C-b>#[noreverse]#[fg=default] ,}'

# Pane Border {{{2
set -g pane-border-format " #{?pane_active,,#[fg=terminal]} #P#{?#T,:,}#{?#{==:#T,#H},,#T} #{s|$HOME|~|:pane_current_path} "

# Aliases {{{2
set -g command-alias[100] vsp="split-window -h"
set -g command-alias[101] sp="split-window -v"
set -g command-alias[1450] is-pane-dead='run "[[ $(tmux display -p \"#{pane_dead}\") == 1 ]]"'
set -g command-alias[29547] man='splitw -hbl 80 ''; set -p remain-on-exit off; respawnp -k man tmux'
set -g command-alias[20548] mods='splitw -hbl 80 mods'
# Miscellaneous {{{2
set -g aggressive-resize on
set -g allow-passthrough all
set -g base-index 1
set -g default-terminal "xterm-256color"
set -g destroy-unattached off
set -g detach-on-destroy off
set -g escape-time 0
set -g menu-border-lines rounded
set -g message-line 2
set -g mode-keys vi
set -g mouse on
set -g other-pane-width 80
set -g pane-base-index 1
set -g pane-border-indicators both
set -g pane-border-lines heavy
set -g pane-border-status top
set -g popup-border-lines rounded
set -g remain-on-exit off
set -g renumber-windows on
set -g set-titles on
set -g status 2
set -g status-interval 1
set -g status-justify absolute-centre
set -g status-keys vi
set -g status-left-length 120
set -g status-position bottom
set -g status-right-length 120
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
set -sa terminal-overrides ",xterm*:Tc"
# Hooks {{{1
# after-split-window {{{2
# set-hook -g after-split-window[100] {
#   command-prompt -i -I "#{pane_title}" -p 'Pane title:' {
#     select-pane -T '%%'
#     select-pane -T "#{s/^=//:pane_title}"
#   }
# }
# after-new-window {{{2
# set-hook -g after-new-window[100] {
#   command-prompt -I "#{pane_current_path},#{pane_title}" -p "Window title:,Pane title:" {
#     rename-window '%1'
#     select-pane -T '%2'
#   }
# }
# Bindings {{{1
# Root {{{2
bind -N "Enter (dead: respawn)" -n Enter \
  if -F '#{pane_dead}' { respawn-pane } { send-keys Enter }
bind -N "q (dead: kill)" -n q \
  if -F '#{pane_dead}' { kill-pane } { send-keys q }
bind -N "C-u (dead: scroll up)" -n C-u \
  if -F '#{pane_dead}' { copy-mode -eu } { send-keys C-u }
bind -N ": (dead: cmd)" -n : \
  if -F '#{pane_dead}' { command-prompt } { send-keys : }
# Mouse {{{2
bind-key -n MouseDown1Status \
  display -d0 'line: #{mouse_status_line}, range: #{mouse_status_range}' \;\
  if -F '#{==:#{mouse_status_range},pane}' {
    run "tmux select-pane -t '#{pane_id}'"
  } {
    if -F '#{==:#{mouse_status_range},window}' { select-window -t = }
  }
# Prefix {{{2
# Miscellaneous {{{3

bind -N "Last pane" \; last-pane -Z
bind -N "Rename pane" v \
  command-prompt -I "#{pane_title}" { selectp -T '%%' }
bind -N "Reload config" r \
  source -F '#{config_files}' \; display "Config reloaded!"
bind -N "Clear screen" C-l send 'C-l'
bind -N "List all keys" / list-keys
bind -N "Customize mode" O customize-mode -Z
#
bind -N "Open kill menu" x \
  menu -T 'Kill...' \
    server S {
      kill-server
    } session s {
      kill-session
    } window w {
      kill-window
    } pane p {
      kill-pane
    } '' respawn-pane r {
      respawn-pane -k
    }

# Goto menu {{{3

bind -N 'Open goto menu' g \
  menu -T 'Goto Menu' \
    buku b {
      popup -T 'buku' -EE 'tmuxp load -d buku && tmux attach -t buku'
    } 'launch session' g {
      popup -h 80% -w 80 -T 'launch session' -EE '\
        tmuxp ls | \
        fzf --multi \
          --bind "ctrl-o:execute(tmuxp load -d {})" \
          --bind "ctrl-e:execute(tmuxp edit {})" | \
        xargs tmuxp load -y'
    } mods m {
      splitp -hbl 80 mods
    } nb n {
      popup -h 90% -w 66% -y 0 -T nb -EE 'tmux attach -t nb'
    } spotify p {
      popup -h 90% -w 66% -T 'spotify' -EE 'tmux attach -t spotify'
    } btop t {
      popup -h 100% -w 100% -T btop -h 90% -w 95% -E btop
    }

# vim: ft=tmux fdm=marker fdl=0
