#  === Intro
#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/zprezto/init.zsh"
fi

# Customize to your needs...
#  ---
#  === Variables
#  ╭──────────────────────────────────────────────────────────╮
#  │                                                          │
#  │                        Variables                         │
#  │                                                          │
#  ╰──────────────────────────────────────────────────────────╯

export COMPOSER_HOME="${XDG_CONFIG_HOME:=$HOME}/composer"
export KEYTIMEOUT=1
export MANPAGER='nvim +Man!'
export MANWIDTH=999
export RANGER_LOAD_DEFAULT_RC=false
{{- if eq .chezmoi.os "darwin" }}
export CPATH=/opt/homebrew/include
export LIBRARY_PATH=/opt/homebrew/lib
{{- end }}

#  ---
#  === Functions
#  ╭──────────────────────────────────────────────────────────╮
#  │                                                          │
#  │                        Functions                         │
#  │                                                          │
#  ╰──────────────────────────────────────────────────────────╯

function has {
  command -v "$1" &>/dev/null
}

function rgd() {
  rg --json "$argv" | delta
}

function a() {
  if [ -f please ]; then
    php please $argv
  elif [ -f artisan ]; then
    php artisan $argv
  elif [ -f vendor/bin/wp ]; then
    vendor/bin/wp $argv
  elif [ -f craft ]; then
    valet php craft $argv
  fi
}

function readme() {
  glow -p "$(brew --prefix $argv)/README.md"
}

function pope() {
  if [[ -d $argv[1] ]]; then
    dir="$(dirname $argv[1])/$(basename $argv[1])"
    target="$dir"
  elif {[ -f $argv[1] ]}; then
    dir="$(dirname $argv[1])"
    target="$argv[1]"
  fi
  tmux display-popup -E -d $dir -h '90%' -w '70%' "nvim $target"
}

function commit() {
  commitMessage="$*"

  if [ "$commitMessage" = "" ]; then
    aicommits
    return
  fi

  eval "git commit -a -m '${commitMessage}'"
}

function pnpmg() {
  cd $HOME/npmbin
  yarn add $@
  cd -
}

function kagi() {
  local q=$(jq -R -r @uri <<<"$argv")
  local url="https://kagi.com/search?q=$q"
  echo "$url"
  open $url
}

function _navi_call() {
  local result="$(navi "$@" </dev/tty)"
  printf "%s" "$result"
}

function _navi_widget() {
  local -r input="${LBUFFER}"
  local -r last_command="$(echo "${input}" | navi fn widget::last_command)"
  local replacement="$last_command"

  if [ -z "$last_command" ]; then
    replacement="$(_navi_call --print)"
  elif [ "$LASTWIDGET" = "_navi_widget" ] && [ "$input" = "$previous_output" ]; then
    replacement="$(_navi_call --print --query "$last_command")"
  else
    replacement="$(_navi_call --print --best-match --query "$last_command")"
  fi

  if [ -n "$replacement" ]; then
    local -r find="${last_command}_NAVIEND"
    previous_output="${input}_NAVIEND"
    previous_output="${previous_output//$find/$replacement}"
  else
    previous_output="$input"
  fi

  zle kill-whole-line
  LBUFFER="${previous_output}"
  region_highlight=("P0 100 bold")
  zle redisplay
}

function take {
  command mkdir -p "$@" && cd "$@"
}

function move {
  setopt LOCAL_OPTIONS NO_UNSET ERR_RETURN
  command mv "$1" "$2" && cd "$2"
}

function txpe {
  if [[ -z "$@" ]]; then
    session="$(tmuxp ls | gum filter)"
  else
    session="$@"
  fi

  (cd ~/.config/tmuxp && e "$session.yml")
}

function txa {
  setopt PIPE_FAIL ERR_RETURN

  if [[ -n "$@" ]]; then
    session="$@"
  else
    session="$(tmuxp ls | gum filter --fuzzy)"
  fi

  if ! tmux has-session -t "$session" &>/dev/null; then
    gum spin --spinner=meter -- tmuxp load -d "$session"
  fi

  tmux attach-session -t "$session" &>/dev/null || tmux switch-client -t "$session" &>/dev/null
}

function ls {
  if has lsd; then
    lsd "$@"
  else
    command ls "$@"
  fi
}

function cat {
  has bat &&
    bat $@ ||
    command cat $@
}

#  ---
#=== Aliases
#  ╭──────────────────────────────────────────────────────────╮
#  │                                                          │
#  │                         Aliases                          │
#  │                                                          │
#  ╰──────────────────────────────────────────────────────────╯

#  === Normal aliases

#  === a
#  ────────────────────────────────────────────────────────────

alias aic="aicommits"
alias ans="ansible"
alias ansb="ansible-playbook"
alias ansi="ansible-inventory"
alias ansv="ansible-vault"

#  ---
#  === b
#  ────────────────────────────────────────────────────────────

{{ if eq .chezmoi.os "darwin" -}}
alias brewh="brew home"
alias brewk="brew info"
alias brewp="brew services"
alias brewpr="brew services restart"
alias brewps="brew services start"
alias brewpx="brew services stop"
{{- end }}

#  ---
#  === c
#  ────────────────────────────────────────────────────────────

{{ if eq .chezmoi.os "darwin" -}}
alias caskh="brew home --cask"
alias caskk="brew info --cask"
{{- end -}}

alias cat &> /dev/null && unalias cat
alias cm="chezmoi"
alias cma="chezmoi add --prompt"
alias cmes="(cd ~/.local/share/chezmoi/.chezmoiscripts && nvim .)"
alias cmg="chezmoi git"
alias cmgpp="chezmoi git pull && chezmoi git push"
alias cmgs="chezmoi git status"
alias cmi="chezmoi init"
alias cmma="chezmoi merge-all"
alias cmra="chezmoi re-add --interactive"
alias cms="chezmoi status"

#  ---
#  === e
#  ────────────────────────────────────────────────────────────

alias e="${(z)EDITOR:-nvim}"
alias ez="exec zsh"

#  ---
#  === h
#  ────────────────────────────────────────────────────────────

alias hosts="sudo e /etc/hosts && dscacheutil -flushcache"

#  ---
#  === l
#  ────────────────────────────────────────────────────────────

alias lg="lazygit"
alias lll="linode-cli linodes ls"
alias ls &> /dev/null && unalias ls

#  ---
#  === m
#  ────────────────────────────────────────────────────────────

alias mkdir="mkdir -p"

#  ---
#  === r
#  ────────────────────────────────────────────────────────────

alias r="ranger"
alias ranger="source ranger"

#  ---
#  === s
#  ────────────────────────────────────────────────────────────

alias sshconf="chezmoi edit --watch ~/.ssh/config"

#  === t
#  ────────────────────────────────────────────────────────────

alias tmux.conf="(cd {{ .chezmoi.homeDir }}/.config/tmux && chezmoi edit --watch tmux.conf)"
alias tx="tmux"
alias txks="tmux list-sessions -F '#S' 2>/dev/null | gum filter | xargs -I _ tmux kill-session -t _"
alias txls="tmux list-sessions"
alias txpl="tmuxp ls | gum filter | xargs tmuxp load -d"

#  ---
#  === v
#  ────────────────────────────────────────────────────────────

alias vimrc="(cd {{ .chezmoi.homeDir }}/.config/nvim && nvim .)"

#  ---
#  === z
#  ────────────────────────────────────────────────────────────

for rc in zshrc zpreztorc zshenv zlogin zlogout zprofile; do
  alias $rc="(cd $ZDOTDIR && chezmoi edit --apply .$rc); ez"
done

#  ---
#  ---
#  === Suffix aliases
#  ╭────────────────╮
#  │ Suffix aliases │
#  ╰────────────────╯

alias -s {md,markdown,mkdwn}="glow -p"

#  ---
#  === Global aliases
#  ╭────────────────╮
#  │ Global Aliases │
#  ╰────────────────╯

alias -g P="| p"
alias -g @noerr="2> /dev/null"
alias -g @noout="&> /dev/null"

#  ---
#  ---
#  === Bindings
#  ╭──────────────────────────────────────────────────────────╮
#  │                                                          │
#  │                         Bindings                         │
#  │                                                          │
#  ╰──────────────────────────────────────────────────────────╯

zle -N lg # create a zle widget so it can be bound to a key
bindkey '^g' lg

bindkey -M vicmd v edit-command-line
bindkey '^ ' autosuggest-accept

zle -N _navi_widget
bindkey '^n' _navi_widget

#  ---
#  === Application Settings
#  ╭──────────────────────────────────────────────────────────╮
#  │                                                          │
#  │                   Application Settings                   │
#  │                                                          │
#  ╰──────────────────────────────────────────────────────────╯

#   === keychain

#  ╭──────────╮
#  │ keychain │
#  ╰──────────╯

eval $(keychain --eval --quiet --agents ssh,gpg id_ed25519 6AEFB22E FD235DFD 48B95546)

#  ---
#  === zoxide
#  ╭────────╮
#  │ zoxide │
#  ╰────────╯

function _load_zoxide {
  eval "$(zoxide init zsh)"
}
zsh-defer _load_zoxide

#  ---
#  === chezmoi
#  ╭─────────╮
#  │ chezmoi │
#  ╰─────────╯

function _load_chezmoi {
  source <(chezmoi completion zsh)
}
zsh-defer _load_chezmoi

#  ---
#  === broot
#  ╭───────╮
#  │ broot │
#  ╰───────╯

function _load_broot {
  source <(broot --print-shell-function zsh)
  broot --set-install-state installed
}
zsh-defer _load_broot

#  ---
#  === atuin
#  ╭───────╮
#  │ atuin │
#  ╰───────╯

function _load_atuin {
  eval "$(atuin init zsh)"
}
zsh-defer _load_atuin

#  ---
#  === fzf
#  ╭─────╮
#  │ fzf │
#  ╰─────╯

[ -f ~/.fzf.zsh ] && . $HOME/.fzf.zsh

#  ---
#  === rust
#  ╭──────╮
#  │ rust │
#  ╰──────╯

[ -f ~/.cargo/env ] && source "$HOME"/.cargo/env

#  ---
#  === bob
#  ╭─────╮
#  │ bob │
#  ╰─────╯

source <(bob complete zsh)

#  ---
#  === starship
#  ╭──────────╮
#  │ starship │
#  ╰──────────╯

eval "$(starship init zsh)"

#  ---
#  === direnv
#  ╭────────╮
#  │ direnv │
#  ╰────────╯

eval "$(direnv hook zsh)"

#  ---
#  === asdf
#  ╭──────╮
#  │ asdf │
#  ╰──────╯

. "$HOME/.asdf/asdf.sh"

#  ---
#  === op (1password)
#  ╭───────────╮
#  │ 1password │
#  ╰───────────╯

has op && { eval "$(op completion zsh)"; compdef _op op }

#  ---
#  ---
# vim: filetype=tmpl.zsh foldmethod=marker foldcolumn=2 foldmarker====,---
