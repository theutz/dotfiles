local w = require("wezterm")
local a = w.action

-- Config builder
local c = {}
if w.config_builder then
	c = w.config_builder()
end
c:set_strict_mode(true)

-- Color scheme & colors
local function get_appearance()
	if w.gui then
		return w.gui.get_appearance()
	end
	return "Dark"
end
local function scheme_for_appearance(appearance)
	if appearance:find("Dark") then
		return "Catppuccin Mocha"
	else
		return "Catppuccin Latte"
	end
end
c.color_scheme = scheme_for_appearance(get_appearance())
c.bold_brightens_ansi_colors = "BrightAndBold"
c.window_background_opacity = 0.8
c.text_background_opacity = 1.0
c.macos_window_background_blur = 40
c.inactive_pane_hsb = {
	saturation = 0.7,
	brightness = 0.2,
}
local function contrast_ratio_for_appearance(appearance)
	if appearance:find("Dark") then
		return 4.5
	else
		return 1.0
	end
end
c.text_min_contrast_ratio = contrast_ratio_for_appearance(get_appearance())

-- Fonts
c.font = w.font("Berkeley Mono", { weight = 400 })
c.font_size = 16
c.line_height = 1.6

-- UI
c.quit_when_all_windows_are_closed = false
c.window_decorations = "RESIZE"
c.adjust_window_size_when_changing_font_size = false
-- config.window_close_confirmation = "AlwaysPrompt"
c.window_padding = {
	top = "16px",
	bottom = "4px",
	left = "8px",
	right = "0px",
}
c.use_fancy_tab_bar = false
c.show_tab_index_in_tab_bar = true
c.tab_max_width = 120
c.hide_tab_bar_if_only_one_tab = false
c.enable_tab_bar = true
c.tab_bar_at_bottom = true

-- Environment
c.default_prog = { "{{ .mise.shimsDir }}/nu", "--login" }
c.set_environment_variables = {
	XDG_CONFIG_HOME = "{{ .chezmoi.homeDir }}/.config",
	XDG_DATA_HOME = "{{ .chezmoi.homeDir }}/.local/share",
	XDG_STATE_HOME = "{{ .chezmoi.homeDir }}/.local/state",
	XDG_CACHE_HOME = "{{ .chezmoi.homeDir }}/.cache",
}

-- Text rendering
c.allow_square_glyphs_to_overflow_width = "WhenFollowedBySpace"

-- Keyboard
c.enable_kitty_keyboard = true
c.leader = { key = "m", mods = "CTRL|ALT", timeout_milliseconds = 2000 }
c.keys = {
	{ key = "\\", mods = "LEADER", action = a.SplitPane({ direction = "Right" }) },
	{ key = "|", mods = "LEADER|SHIFT", action = a.SplitPane({ direction = "Right", top_level = true }) },
	{ key = "-", mods = "LEADER", action = a.SplitPane({ direction = "Down" }) },
	{ key = "_", mods = "LEADER", action = a.SplitPane({ direction = "Down", top_level = true }) },
	{ key = "v", mods = "LEADER", action = a.SplitPane({ direction = "Right" }) },
	{ key = "s", mods = "LEADER", action = a.SplitPane({ direction = "Down" }) },
	{ key = "h", mods = "LEADER", action = a.ActivatePaneDirection("Left") },
	{ key = "j", mods = "LEADER", action = a.ActivatePaneDirection("Down") },
	{ key = "k", mods = "LEADER", action = a.ActivatePaneDirection("Up") },
	{ key = "l", mods = "LEADER", action = a.ActivatePaneDirection("Right") },
	{ key = "c", mods = "LEADER", action = a.SpawnTab("CurrentPaneDomain") },
	{ key = "n", mods = "LEADER", action = a.ActivateTabRelative(1) },
	{ key = "p", mods = "LEADER", action = a.ActivateTabRelative(-1) },
	{ key = "x", mods = "LEADER", action = a.CloseCurrentPane({ confirm = true }) },
	{ key = "C", mods = "LEADER|SHIFT", action = a.SpawnWindow },
	{ key = "N", mods = "LEADER|SHIFT", action = a.ActivateWindowRelative(1) },
	{ key = "P", mods = "LEADER|SHIFT", action = a.ActivateWindowRelative(-1) },
	{ key = "X", mods = "LEADER|SHIFT", action = a.CloseCurrentTab({ confirm = true }) },
	{ key = "r", mods = "LEADER", action = a.RotatePanes("Clockwise") },
	{ key = "R", mods = "LEADER|SHIFT", action = a.RotatePanes("CounterClockwise") },
	{ key = " ", mods = "LEADER", action = a.QuickSelect },
	{ key = "<", mods = "LEADER", action = a.MoveTabRelative(-1) },
	{ key = ">", mods = "LEADER", action = a.MoveTabRelative(1) },
	{ key = "z", mods = "LEADER", action = a.TogglePaneZoomState },
	{ key = "[", mods = "LEADER", action = a.ActivateCopyMode },
	{
		key = "H",
		mods = "LEADER|SHIFT",
		action = a.Multiple({
			a.AdjustPaneSize({ "Left", 1 }),
			a.ActivateKeyTable({
				name = "resize_pane",
				one_shot = false,
				until_unknown = true,
				timeout_milliseconds = 1000,
			}),
		}),
	},
	{
		key = "J",
		mods = "LEADER|SHIFT",
		action = a.Multiple({
			a.AdjustPaneSize({ "Down", 1 }),
			a.ActivateKeyTable({
				name = "resize_pane",
				one_shot = false,
				until_unknown = true,
				timeout_milliseconds = 1000,
			}),
		}),
	},
	{
		key = "K",
		mods = "LEADER|SHIFT",
		action = a.Multiple({
			a.AdjustPaneSize({ "Up", 1 }),
			a.ActivateKeyTable({
				name = "resize_pane",
				one_shot = false,
				until_unknown = true,
				timeout_milliseconds = 1000,
			}),
		}),
	},
	{
		key = "L",
		mods = "LEADER|SHIFT",
		action = a.Multiple({
			a.AdjustPaneSize({ "Right", 1 }),
			a.ActivateKeyTable({
				name = "resize_pane",
				one_shot = false,
				until_unknown = true,
				timeout_milliseconds = 1000,
			}),
		}),
	},
}
c.key_tables = {
	resize_pane = {
		{ key = "H", mods = "SHIFT", action = a.AdjustPaneSize({ "Left", 1 }) },
		{ key = "h", action = a.AdjustPaneSize({ "Left", 1 }) },

		{ key = "J", mods = "SHIFT", action = a.AdjustPaneSize({ "Down", 1 }) },
		{ key = "j", action = a.AdjustPaneSize({ "Down", 1 }) },

		{ key = "K", mods = "SHIFT", action = a.AdjustPaneSize({ "Up", 1 }) },
		{ key = "k", action = a.AdjustPaneSize({ "Up", 1 }) },

		{ key = "L", mods = "SHIFT", action = a.AdjustPaneSize({ "Right", 1 }) },
		{ key = "l", action = a.AdjustPaneSize({ "Right", 1 }) },

		-- Cancel the mode by pressing escape
		{ key = "Escape", action = "PopKeyTable" },
	},
}

w.on("update-right-status", function(window, pane)
	local name = window:active_key_table()
	if name then
		name = "TABLE: " .. name .. " "
	end
	window:set_right_status(name or "")
end)

-- Notify on reload
w.on("window-config-reloaded", function(window, _)
	window:toast_notification("wezterm", "configuration reloaded!", nil, 4000)
end)

return c
