#!/usr/bin/env nu --login

use service.nu

# Settings
let padding = 16

# Load the scripting addition
sudo yabai --load-sa

# Global Settings
yabai -m config menubar_opacity 1.0                  # 0-1
yabai -m config mouse_follows_focus on               # on | off
yabai -m config focus_follows_mouse autoraise        # autofocus | autoraise | off
yabai -m config display_arrangement_order horizontal # default | vertical | horizontal
yabai -m config window_origin_display focused        # default | focused | cursor
yabai -m config window_placement first_child         # first_child | second_child
yabai -m config window_zoom_persist off              # on | off
yabai -m config window_shadow float                  # true | false | float
yabai -m config window_opacity on                    # on | off
yabai -m config window_opacity_duration 0.1          # 0-1
dark-notify -e | complete | match ($in.stdout | str trim) {
  "light" => [0.97 0.92],
  "dark" => [0.90 0.75]
} | do {
  yabai -m config active_window_opacity ($in | get 0)
  yabai -m config normal_window_opacity ($in | get 1)
}
yabai -m config insert_feedback_color 0x88FF0000     # 0xAARRGGBB
yabai -m config split_ratio 0.5                      # 0-1
yabai -m config split_type auto                      # vertical | horizontal | auto
yabai -m config mouse_modifier ctrl                  # cmd | alt | shift | ctrl | fn
yabai -m config mouse_drop_action stack              # swap | stack

# Space Settings
yabai -m config layout bsp                    # bsp | stack | float
yabai -m config top_padding $padding          # int
yabai -m config bottom_padding $padding       # int
yabai -m config left_padding $padding         # int
yabai -m config right_padding $padding        # int
yabai -m config window_gap $padding           # int
yabai -m config external_bar all:40:0

#
# Labeled Spaces
#
[
  primary   secondary  notes      messages
  meetings  media      reference  system
] | do {
  let labels = $in
  yabai -m query --spaces | from json | do {
    let spaces = $in
    ($labels | length) - ($spaces | length) | if ($in > 0) {
      seq 1 $in | each { yabai -m space --create }
    }
    $labels | enumerate | each {|x|
      yabai -m space ($x.index + 1) --label $x.item
    }
  }
}

#
# Labeled Displays
#

yabai -m display 1 --label builtin
try { yabai -m display 2 --label external }

#
# Rules
#
let rules = [
    [space    	app                	label];
    [system   	'^System Settings$'	settings]
    [messages 	WhatsApp           	whatsapp]
    [messages 	Messages           	messages]
    [messages 	Telegram           	telegram]
    [media    	Spotify            	spotify]
    [system   	ClearVPN           	clearvpn]
    [system   	'CleanMyMac X'     	cleanmymac]
    [reference	"Figma"            	figma]
    [meetings 	"Zoom"             	zoom]
    [secondary	"Slack"            	slack]
    [primary  	"Emacs"            	emacs]
    [primary  	"qutebrowser"      	qutebrowser]
    [secondary	"WezTerm"          	wezterm]
    [secondary	"Dash"             	dash]
]

$rules | each { items {|k, v| $"($k)=($v)"} | yabai -m rule --add ...$in }

# Signals
yabai -m signal --add label=reload-sa event=dock_did_restart action="sudo yabai --load-sa"
yabai -m signal --add label=focus-wez event=window_created action='yabai -m window $YABAI_WINDOW_ID --focus' app='^wezterm-gui$'
[
  space_created
  space_destroyed
  space_changed
  display_added
  display_removed
  display_moved
  system_woke
] | each {|x|
  yabai -m signal --add $"event=($in)" action="/opt/homebrew/bin/sketchybar --reload"
}

# Final Instructions
yabai -m rule --apply
sketchybar --reload
service restart borders

# vim: ft=nu
