import "@toml/toml.pkl"

hidden const toKebab = (o) -> o.toMap().mapKeys(
  (key, value) -> key.replaceAll("_", "-")
)

output {
  value = toKebab.apply(outer)
  renderer = new toml.Renderer {
    converters =
      let (custom = List(
        KeyMapping,
        OnWindowDetected,
        OnWindowDetectedIf,
        Exec
      ))
        new {
          for (_class in custom) {
            [_class] = toKebab
          }
        }
  }
}

/// You can use it to add commands that run after AeroSpace startup.
/// Available commands : https://nikitabobko.github.io/AeroSpace/commands
after_startup_command: Listing<String>

/// Start AeroSpace at login
start_at_login: Boolean = false

/// Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable_normalization_flatten_containers: Boolean = true

/// Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable_normalization_opposite_orientation_for_nested_containers: Boolean = true

/// See: https://nikitabobko.github.io/AeroSpace/guide#layouts
/// The 'accordion-padding' specifies the size of accordion padding
/// You can set 0 to disable the padding feature
accordion_padding: Int = 30

default_root_container_layout: "accordion" | "tiles" = "tiles"

/// 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
///               tall monitor (anything higher than wide) gets vertical orientation
default_root_container_orientation: "horizontal" | "vertical" | "auto" = "auto"

// Mouse follows focus when focused monitor changes
// Drop it from your config, if you don't like this behavior
// See <https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks>
// See <https://nikitabobko.github.io/AeroSpace/commands#move-mouse>
on_focused_monitor_changed: Listing<String> = new {
  "move-mouse monitor-lazy-center"
}

/// You can track focus changes using the following callbacks: [on-focus-changed]
/// and [on-focused-monitor-changed].
///
/// * [on_focus_changed] is called every time focused window or workspace changes.
/// * [on_focused_monitor_changed] is called every time focused monitor changes.
///
/// A common use case for the callbacks is to implement "mouse follows focus"
/// behavior. All you need is to combine the callback of your choice with
/// [move-mouse] command:
///
/// ```toml
/// on-focused-monitor-changed = ['move-mouse monitor-lazy-center'] # Mouse lazily follows focused monitor (default in i3)
/// # or
/// on-focus-changed = ['move-mouse window-lazy-center'] # Mouse lazily follows any focus (window or workspace)
/// ```
///
/// You shouldn’t rely on the order callback are called, since it’s an
/// implementation detail and can change from version to version.
///
/// The callbacks are "recursion resistant", which means that any focus change
/// within the callback won’t retrigger the callback. Changing the focus within
/// these callbacks is a bad idea anyway, and the way it’s handled will probably
/// change in future versions.
on_focus_changed: Listing<String>

/// You can effectively turn off macOS "Hide application" (cmd-h) feature by
/// toggling this flag
///
/// Useful if you don't use this macOS feature, but accidentally hit cmd-h or
/// cmd-alt-h key
///
/// Also see: <https://nikitabobko.github.io/AeroSpace/goodies#disable-hide-app>
automatically_unhide_macos_hidden_apps: Boolean = false

/// [exec-on-workspace-change] callback allows to run arbitrary process when
/// focused workspace changes. It may be useful for integrating with bars.
///
/// ```toml
/// # Notify Sketchybar about workspace change
/// exec-on-workspace-change = ['/bin/bash', '-c',
///     'sketchybar --trigger aerospace_workspace_change FOCUSED=$AEROSPACE_FOCUSED_WORKSPACE'
/// ]
/// ```
/// 
/// Besides the [exec.env-vars], the process has access to the following
/// environment variables:
///
/// * `AEROSPACE_FOCUSED_WORKSPACE` - the workspace user switched to
/// 
/// * `AEROSPACE_PREV_WORKSPACE` - the workspace user switched from
/// 
/// For a more elaborate example on how to integrate with Sketchybar see
/// /goodies
exec_on_workspace_change: Listing<String>

class KeyMapping {
  preset: "qwerty" | "dvorak" | "colemap" = "qwerty"
}

/// Possible values: (qwerty|dvorak|colemak)
/// See <https://nikitabobko.github.io/AeroSpace/guide#key-mapping>
key_mapping: KeyMapping = new {}

class Gaps {
  inner: GapsInner
  `outer`: GapsOuter
}

class GapsInner {
  horizontal: Gap = 0
  vertical: Gap = 0
}

class GapsOuter {
  left: Gap = 0
  right: Gap = 0
  top: Gap = 0
  bottom: Gap = 0
}

class GapsMonitor {
  monitor: Mapping<String, Int>
}

typealias Gap = Int | Listing<Int | GapsMonitor>

/// Gaps between windows (inner-*) and between monitor edges (outer-*).
/// Possible values:
/// - Constant:     gaps.outer.top = 8
/// - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
///                 In this example, 24 is a default value when there is no match.
///                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
///                 See:
///                 <https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors>
gaps: Gaps = new {}

class OnWindowDetectedIf {
  app_id: String
  app_name_regex_substring: String?
  window_title_regex_substring: String?
  workspace: String?
  during_aerospace_startup: Boolean = false
}

class OnWindowDetected {
  `if`: OnWindowDetectedIf
  check_further_callbacks: Boolean = false
  run: Listing<String>
}

on_window_detected: Listing<OnWindowDetected>

class Exec {
  env_vars: Mapping<String, String>
}

/// You can override env variables with the following syntax:
///
/// ```toml
/// [exec.env-vars]
///     PATH = '${HOME}/bin:${PATH}'
/// ```
///
/// Environment variable substitution is supported in form of ${ENV_VAR}
exec: Exec = new {
  env_vars {}
}

/// You can use workspace-to-monitor-force-assignment syntax to assign workspaces to always appear on particular monitors
///
/// ```toml
/// [[workspace-to-monitor-force-assignment]]
///     1 = 1                              # Monitor sequence number from left to right. 1-based indexing
///     2 = 'main'                         # Main monitor
///     3 = 'secondary'                    # Non-main monitor in case when there are only two monitors
///     4 = 'built-in'                     # Case insensitive regex substring
///     5 = '^built-in retina display$'    # Case insensitive regex match
///     6 = [['secondary', 'dell']]        # You can specify multiple patterns.
///                                        # The first matching pattern will be used
/// ```
///
/// - Left hand side of the assignment is the workspace name
/// - Right hand side of the assignment is the monitor pattern
///
/// Supported monitor patterns:
///
/// - main - "Main" monitor ("main" as in System Settings → Displays → Use as)
/// - secondary - Non-main monitor in case when there are only two monitors
/// - <number> (e.g. 1, 2) - Sequence number of the monitor from left to right. 1-based indexing
/// - <regex-pattern> (e.g. dell.*, built-in.*) - Case insensitive regex substring pattern
///
/// You can specify multiple patterns as an array. The first matching pattern will be used
///
/// move-workspace-to-monitor command has no effect for workspaces that have monitor assignment
workspace_to_monitor_force_assignment: Mapping<String, String | Listing<String>>?

/// 'main' binding mode declaration
/// See: <https://nikitabobko.github.io/AeroSpace/guide#binding-modes>
/// 'main' binding mode must be always presented
/// Fallback value (if you omit the key): mode.main.binding = {}
///
/// All possible keys:
///   - Letters.        a, b, c, ..., z
///   - Numbers.        0, 1, 2, ..., 9
///   - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
///   - F-keys.         f1, f2, ..., f20
///   - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon,
///                     backtick, leftSquareBracket, rightSquareBracket, space, enter, esc,
///                     backspace, tab, pageUp, pageDown, home, end, forwardDelete,
///                     sectionSign (ISO keyboards only, european keyboards only)
///   - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
///                     keypadMinus, keypadMultiply, keypadPlus
///   - Arrows.         left, down, up, right
///
///   All possible modifiers: cmd, alt, ctrl, shift
///
///   All possible commands: <https://nikitabobko.github.io/AeroSpace/commands>
///
///   See: <https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget>
///   You can uncomment the following lines to open up terminal with alt + enter shortcut
///   (like in i3)
///
///   ```toml
///     alt-enter = '''exec-and-forget osascript -e '
///     tell application "Terminal"
///         do script
///         activate
///     end tell'
///     '''
///   ```
mode: Mapping<String, Mode>

typealias Binding = Mapping<String, String | Listing<String>>
class Mode {
  binding: Binding
}
