#!/usr/bin/env just --unstable --working-directory . --justfile

set shell := ["zsh", "-euo", "pipefail", "-c"]
set quiet
set positional-arguments

cmd := justfile()
dir := join(env('XDG_CONFIG_HOME', join(env('HOME'), '.config')), "tmuxp")

[private]
default:
  #!/usr/bin/env zsh -euo pipefail
  {{cmd}} --dump --dump-format json |
    jq -r '.recipes | to_entries[] | select(.key != "default") | .key + "\t" + .value.doc' |
    column |
    gum filter --header="Choose command..." --limit=1 |
    cut -f 1 |
    xargs {{cmd}}

# List all active sessions
list:
  #!/usr/bin/env zsh -euo pipefail
  if ! tmux ls 2>/dev/null; then
    gum log -l warn "No tmux sessions"
  fi

# Switch to a different session
switch $session="":
  #!/usr/bin/env zsh -euo pipefail
  tmux ls -F '#S' |
    gum filter --value "$session" |
    read session
  tmux switch-client -t $session

# Attach to a running session
attach session="":
  #!/usr/bin/env zsh -euo pipefail
  if tmux ls &>/dev/null; then
    tmux ls -F '#S' | gum filter --value=$session |
      read session
  else
    gum input --header "Name your new session..." --placeholder="" |
      read session
    tmux new -s $session -n main -d
  fi
  tmux attach -t $session

# Catalog all session templates
catalog $session="":
  ls {{dir}} | sed 's/\.ya*ml//' | gum filter --value "$session"

# Load a tmuxp session in detached state
load:
  tmuxp load -d $({{cmd}} catalog)

# Attach to a tmuxp session
launch $session="":
  #!/usr/bin/env zsh -euo pipefail
  {{cmd}} catalog $session | read session
  tmuxp load -y $session ||
    tmuxp load -y -d $session ||
    tmux switch-client -t $session

# Send a tmuxp definition to the trash
delete:
  #!/usr/bin/env zsh -euo pipefail
  file="{{dir}}/$(ls {{dir}} | gum filter)" || { gum log -l fatal "No file selected"; return 1 }
  if
    gum confirm "Send ${file:t} to the trash?"
  then
    trash $file &&
      gum log -l info "$file deleted." ||
      gum log -l fatal "$file not deleted."
  fi

# Create a new tmuxp session
create $session $template="":
  #!/usr/bin/env zsh -euo pipefail
  ls {{dir}} |
    gum filter --select-if-one --limit=1 --value "$template" |
    read template
  cp {{dir}}/$template {{dir}}/${session}.yml

# Edit a template in $EDITOR
edit session="":
  #!/usr/bin/env zsh -euo pipefail
  gum file {{dir}} | read file
  ${(z)VISUAL:-${(z)EDITOR}} $file

# Switch to a new server
swap:
  #!/usr/bin/env zsh -euo pipefail
  socket="$(ls /tmp/tmux-$UID | gum filter || { gum log -l warn "No socket chosen."; exit 1 })"
  hook="tmux -L $socket attach"
  tmux detach -E $hook

# Remove leftover server socket files
cleanup:
  #!/usr/bin/env zsh -euo pipefail
  dir="/tmp/tmux-$UID"
  sockets="$(ls {{dir}} | gum filter --no-limit || { gum log -l warn "No socket chosen."; return 1 })"
  if
    gum confirm "Delete sockets?"
  then
    gum log -l info "Deleting sockets..."
    rm -v ${${(f)sockets}/#/{{dir}}\/}
  fi
