#!/usr/bin/env just --unstable --working-directory . --justfile

set shell := ["zsh", "-cu"]
set quiet

export cmd := justfile()
export dir := join(env('XDG_CONFIG_HOME', join(env('HOME'), '.config')), "tmuxp")
export GUM_FILTER_PLACEHOLDER := ''
export GUM_FILTER_HEADER := 'Choose session...'
export JUST_LIST_HEADING := "\n  " + file_stem(cmd) + " <subcommand>\n\n" + "  SUBCOMMANDS\n\n"

[private]
default:
  @$cmd --list --unsorted

# List all sessions
[group('session')]
list:
   ls $dir | sed 's/.yml//' | gum filter

# Load a tmuxp session in detached state
[group('session')]
load:
  tmuxp load -d $($cmd list)

# Attach to a tmuxp session
[group('session')]
launch:
  tmuxp load -y $($cmd list)

# Send a tmuxp definition to the trash
[group('session')]
delete:
  #!/usr/bin/env zsh
  file="$dir/$(ls $dir | gum filter)" || { gum log -l fatal "No file selected"; return 1 }
  if
    gum confirm "Send ${file:t} to the trash?"
  then
    trash $file &&
      gum log -l info "$file deleted." ||
      gum log -l fatal "$file not deleted."
  fi

# Create a new tmuxp session
[group('session')]
create session:
  #!/usr/bin/env zsh
  ls $dir |
    gum filter --select-if-one --limit=1 |
    read template
  cp $dir/$template {{join(dir, session)}}.yml

# Edit a template in $EDITOR
[group('session')]
edit:
  $EDITOR $({{cmd}} ls)

# Switch to a new server
[group('server')]
swap:
  #!/usr/bin/env zsh
  set -euo pipefail
  socket="$(ls /tmp/tmux-$UID | gum filter || { gum log -l warn "No socket chosen."; exit 1 })"
  hook="tmux -L $socket attach"
  tmux detach -E $hook

# Remove leftover server socket files
[group('server')]
cleanup:
  #!/usr/bin/env zsh
  set -euo pipefail
  dir="/tmp/tmux-$UID"
  sockets="$(ls $dir | gum filter --no-limit || { gum log -l warn "No socket chosen."; return 1 })"
  if
    gum confirm "Delete sockets?"
  then
    gum log -l info "Deleting sockets..."
    rm -v ${${(f)sockets}/#/$dir\/}
  fi
