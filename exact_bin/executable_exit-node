#!/usr/bin/env -S ${HOME}/.local/bin/mise exec aqua:nushell/nushell -- nu
# vim:ft=nu

def info [...$args: string]: nothing -> nothing {
  [$"(ansi bg_b)(ansi bo) INFO (ansi rst)" ...$args]
  | str join (char space)
  | print -e $in
}

def err [...$args: string]: nothing -> nothing {
  [$"(ansi bg_r)(ansi white_bold) ERROR (ansi rst)" ...$args]
  | str join (char space)
  | print -e $in
}

info Checking tailscale status...
tailscale status --json | from json | if ($in.BackendState == Stopped) {
  info Tailscale is stopped. Starting...
  try { tailscale up } catch {|err|
    err Could not start tailscale; $err.rendered; exit 1
  }
}
info Tailscale started.

let nodes = tailscale exit-node list
| find --no-highlight --invert --regex ^#
| each { str trim }
| compact --empty
| skip 1
| parse --regex r#'^(?<ip>[\d\.]+?)\s{2,}(?<hostname>[\w\.-]+?)\s{2,}(?<country>\w+?)\s{2,}(?<city>.+?)\s\s+(?<status>.*)$'#

let country = $nodes | uniq-by country | input list --fuzzy --display country "Which country?" | get country

$nodes
| where country == $country
| if ($in | length) == 1 { $in } else {
  $country | input list --fuzzy --display city "Which city?"
}
| first
| tee { info $"Switching to ($in.hostname) at ($in.ip) in ($in.city), ($in.country)" }
| tailscale set --exit-node $in.hostname
info "Switched!"
