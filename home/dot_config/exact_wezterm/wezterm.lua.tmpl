local w = require("wezterm")
local a = w.action

-- Setup config builder
local c = {}
if w.config_builder then
	c = w.config_builder()
end
c:set_strict_mode(true)

c.default_workspace = 'main'

c.unix_domains = {
  {
    name = "unix"
  }
}

c.macos_window_background_blur = 10

c.window_background_opacity = 0.90

c.font = w.font("{{ .fonts.mono.family }}", { weight = {{ .fonts.mono.weight }} })
c.font_size = {{ .fonts.mono.size }}
c.line_height = 1.3

c.bold_brightens_ansi_colors = "BrightAndBold"

c.quit_when_all_windows_are_closed = true

c.window_decorations = "RESIZE"

c.adjust_window_size_when_changing_font_size = false

c.allow_square_glyphs_to_overflow_width = "WhenFollowedBySpace"

c.window_padding = {
	top = "16px",
	bottom = "4px",
	left = "12px",
	right = "12px",
}

-- Tab Bar
c.tab_bar_at_bottom = true
c.command_palette_font_size = 16

-- Color scheme
local function get_appearance()
  if w.gui then
    return w.gui.get_appearance()
  end
  return 'Dark'
end

local function scheme_for_appearance(appearance)
	if appearance:find("Dark") then
		return "Catppuccin Mocha"
	else
		return "Catppuccin Latte"
	end
end

c.color_scheme = scheme_for_appearance(get_appearance())

local tabline = w.plugin.require("https://github.com/michaelbrusegard/tabline.wez")
tabline.setup({
  options = {
    tab_separators = {
      left = w.nerdfonts.ple_right_half_circle_thick,
      right = w.nerdfonts.ple_left_half_circle_thick
    }
  },
  sections = {
    tabline_b = { 'workspace' },
    tabline_c = { 'window' },
    tab_active = { 'index', 'tab', ' ', w.nerdfonts.oct_file_directory_fill, ' ', 'cwd', 'zoomed' },
    tab_inactive = { w.nerdfonts.ple_left_half_circle_thin, 'index', w.nerdfonts.ple_right_half_circle_thin , 'tab', ' ', w.nerdfonts.oct_file_directory_fill, ' ', 'cwd', 'zoomed', }
  }
})
tabline.apply_to_config(c)
c.tab_max_width = 60

w.on("window-config-reloaded", function(window, pane)
	local overrides = window:get_config_overrides() or {}
	overrides.color_scheme = scheme_for_appearance(get_appearance())
	window:set_config_overrides(overrides)
end)

-- Keybindings
c.enable_kitty_keyboard = true

c.leader = { key = "m", mods = "META", timeout_milliseconds = 2000 }

c.keys = {
  -- Mux
  {
    mods = "LEADER",
    key = "a",
    action = a.AttachDomain "unix"
  },
  {
    mods = "LEADER",
    key = "d",
    action = a.DetachDomain { DomainName = "unix" }
  },
	-- Workspaces
  {
    mods = "LEADER|SHIFT",
    key = "$",
    action = a.PromptInputLine {
      description = "Enter a new name for the session",
      action = w.action_callback(function (win, pane, line)
        if line then
          local ws = win:mux_window():get_workspace()
          w.mux.rename_workspace(ws, line)
        end
      end)
    }
  },
	{
		mods = "LEADER",
		key = "s",
		action = a.ShowLauncherArgs({ flags = "WORKSPACES", title = "Select workspace" }),
	},
  {
    mods = "LEADER|SHIFT",
    key = "(",
    action = a.SwitchWorkspaceRelative(-1)
  },
  {
    mods = "LEADER|SHIFT",
    key = ")",
    action = a.SwitchWorkspaceRelative(1)
  },
  -- Tabs
  {
    mods = "LEADER",
    key = ",",
    action = a.PromptInputLine {
      description = "Enter a new name for the tab",
      action = w.action_callback(function (win, pane, line)
        if line then
          win:mux_window():active_tab():set_title(line)
        end
      end)
    }
  },
  -- Windows
  {
    mods = "LEADER|SHIFT",
    key = "#",
    action = a.PromptInputLine {
      description = "Enter a new name for the window",
      action = w.action_callback(function (win, pane, line)
        if line then
          win:mux_window():set_title(line)
        end
      end)
    }
  },
	{
		mods = "LEADER",
		key = "-",
		action = a.SplitPane({ direction = "Down" }),

	},
	{
		mods = "SUPER|SHIFT",
		key = "d",
		action = a.SplitPane({ direction = "Down" }),
	},
	{
		mods = "LEADER",
		key = "v",
		action = a.SplitPane({ direction = "Right" }),
	},
	{
		mods = "LEADER",
		key = "|",
		action = a.SplitPane({ direction = "Right" }),
	},
	{
		mods = "SUPER",
		key = "d",
		action = a.SplitPane({ direction = "Right" }),
	},
	{
		mods = "SUPER",
		key = "w",
		action = a.CloseCurrentPane({ confirm = false }),
	},
	{
		mods = "LEADER",
		key = "z",
		action = a.TogglePaneZoomState,
	},
	{
		mods = "LEADER",
		key = "o",
		action = a.RotatePanes("Clockwise"),
	},
	{
		mods = "LEADER|SHIFT",
		key = "o",
		action = a.PaneSelect({ mode = "SwapWithActive" }),
	},
  {
    mods = "LEADER | SHIFT",
    key = "!",
    action = w.action_callback(function (win, pane)
      local tab, window = pane:move_to_new_tab()
      tab:activate()
    end)
  },
  {
    mods = "SUPER",
    key = "]",
    action = a.ActivatePaneDirection 'Next'
  },
  {
    mods = "SUPER",
    key = "[",
    action = a.ActivatePaneDirection 'Prev'
  },
	-- Changing windows
	{
		mods = "SUPER|SHIFT",
		key = "w",
		action = a.CloseCurrentTab({ confirm = true }),
	},
	{
		mods = "LEADER",
		key = "n",
		action = a.ActivateTabRelative(1),
	},
	{
		mods = "LEADER",
		key = "p",
		action = a.ActivateTabRelative(-1),
	},
  {
    mods = "LEADER|SHIFT",
    key = ">",
    action = a.MoveTabRelative(1)
  },
  {
    mods = "LEADER|SHIFT",
    key = "<",
    action = a.MoveTabRelative(-1)
  },
	{
		mods = "LEADER",
		key = "c",
		action = a.SpawnTab("CurrentPaneDomain"),
	},
	-- Copy mode
	{
		mods = "LEADER",
		key = "Enter",
		action = a.ActivateCopyMode,
	},
	{
		mods = "LEADER",
		key = "[",
		action = a.ActivateCopyMode,
	},
	{
		mods = "LEADER|CTRL",
		key = "u",
		action = a.ActivateCopyMode,
	},
}

for i = 1, 9 do
  table.insert(c.keys, {
    mods = "LEADER",
    key = tostring(i),
    action = a.ActivateTab(i - 1)
  })
end

local smart_splits = w.plugin.require("https://github.com/mrjones2014/smart-splits.nvim")
smart_splits.apply_to_config(c, {
	modifiers = {
		resize = "META|SHIFT",
	},
})

return c
