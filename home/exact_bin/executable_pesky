#!/usr/bin/env zsh

set -euo pipefail

SCRIPT_NAME="${0:t}"

log() {
  gum log --prefix="$SCRIPT_NAME" --structured "$@"
}

debug() {
  if [[ -v DEBUG && $DEBUG == true ]]; then
    log -l debug "$@"
  fi
}

DEBUG=false
export DEBUG

help () {
	gum format <<-'markdown'
		# pesky

		Remind me to track my time

		## Usage

		```bash
		pesky [FLAGS]
		```

		### Flags

		- `--help` or `-h`: show this help
		- `--verbose` or `-v`: enable verbose logging
		- `--timesheet=<filepath>` or `-t`: set the timesheet filepath
		  - If no value is given, prints the default path.
		- `--interval=<time in min>` or `-i`: set the interval for reminders
		  - If not value is given, prints the default interval.
	markdown
}

clear_screen=true
interval=6
pesky_dir="${XDG_DATA_HOME:-$HOME/.local/share}/pesky"
timesheet="$pesky_dir/timesheet.json"
show_help=false

args=()
while [[ $# -gt 0 ]]; do
  debug "parsing arg" "'$1'" "${2:-true}"
  case "$1" in
	--verbose | -v)
		DEBUG=true
		export DEBUG
		clear_screen=false
		debug -- "parsing arg" "'$1'" "${2:-true}"
		shift 1
		;;
	--help | -h)
		debug "showing help"
		show_help=true
		shift 1
		;;
	--timesheet | -t)
		if [[ -v 2 && -n "$2" ]]; then
			debug "setting timesheet"
			timesheet="$2"
			shift 2
		else
			debug "printing timesheet dir"
			print "$timesheet"
			exit 0
		fi
		;;
	--interval | -i)
		if [[ -v 2 && -n "$2" ]]; then
			debug -- "parsed '$1' as $2"
			interval="$2"
			shift 2
		else
			debug "printing interval"
			print "$interval"
			exit 0
		fi
		;;
	*)
		args+=("$1")
		shift 1
		;;
	esac
done
set -- "${args[@]}"
unset args

settings=(
	pesky_dir
	timesheet
	interval
	clear_screen
	show_help
)
for v in "${settings[@]}"; do
  debug "setting" "$v" "${(P)v}"
done
unset settings

if [[ "$show_help" == true ]]; then
	help
	exit 0
fi

if [[ ! -d "$pesky_dir" ]]; then
	debug "creating" "pesky_dir" "$pesky_dir"
	mkdir -p "$pesky_dir"
fi

if [[ ! -f "$timesheet" ]]; then
	debug "creating" "timesheet" "$timesheet"
	touch "$timesheet"
fi

while :; do
	data="$(jq . "$timesheet")"

	title="$(gum input --header "Title")"
	url="$(gum input --header "URL")"
	start_time="$(gum input --header "Start Time")"
	end_time="$(gum input --header "End Time")"

	format="$(cat <<-'json'
		{
			"title": "%s",
			"url": "%s",
			"start_time": "%s",
			"end_time": "%s"
		}
	json
	)"
	obj="$(printf "$format" "$title" "$url" "$start_time" "$end_time")"

	break

	minutes="$interval"
	while [[ "$minutes" -gt 0 ]]; do
		debug remaining minutes "$minutes"
		gum spin --spinner moon \
			--title="Waiting for $minutes more minutes..." \
			-- \
			sleep 60
		debug "subtracting 1 minute"
		minutes="$((minutes - 1))"
	done
	noti -t "$SCRIPT_NAME" -m "time to update"
done

# vim: ts=4 noet sw=4 sts=4
