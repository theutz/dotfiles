#!/usr/bin/env -S mise x jc jq fzf gum sd choose -- bash
# vim: ft=bash

set -euo pipefail

format="hex"
colors="$(
  cat <<'txt'
Name               Hex Code
Background         #282A36
Foreground         #F8F8F2
Selection          #44475A
Comment            #6272A4
Red                #FF5555
Orange             #FFB86C
Yellow             #F1FA8C
Green              #50FA7B
Purple             #BD93F9
Cyan               #8BE9FD
Pink               #FF79C6
AnsiBlack          #21222C
AnsiRed            #FF5555
AnsiGreen          #50FA7B
AnsiYellow         #F1FA8C
AnsiBlue           #BD93F9
AnsiMagenta        #FF79C6
AnsiCyan           #8BE9FD
AnsiWhite          #F8F8F2
AnsiBrightBlack    #6272A4
AnsiBrightRed      #FF6E6E
AnsiBrightGreen    #69FF94
AnsiBrightYellow   #FFFFA5
AnsiBrightBlue     #D6ACFF
AnsiBrightMagenta  #FF92DF
AnsiBrightCyan     #A4FFFF
AnsiBrightWhite    #FFFFFF
txt
)"

function _fzf() {
  echo "$colors" |
    fzf --preview '\
      gum join \
      "$(CLICOLOR_FORCE=1 gum style --foreground={2} --padding="1 2" --margin="1" {1} {2})" \
      "$(CLICOLOR_FORCE=1 gum style --background={2} --padding="1 2" --margin="1" {1} {2})" \
    ' \
      --bind 'ctrl-o:change-nth(1|2)' \
      --header-lines=1 \
      --layout reverse \
      --preview-window down \
      "$@"
}

function _get_code_by_name() {
  echo "$colors" |
    jc --asciitable |
    jq --raw-output --arg name "$1" '
      map(select(.name | test("^" + $name + "$"; "i"))) |
      if (length == 1) then
        (first | .hex_code)
      elif (length < 1) then
        error($name + " is not a valid color name.")
      end'
}

function _apply_format() {
  code="$1"
  case "$format" in
  argb | sketchybar)
    echo "$code" | sd '#(.*)' '0xFF$1'
    ;;
  *)
    echo "$code"
    ;;
  esac
}

positional=()

function main() {

  while [[ $# -gt 0 ]]; do
    case $1 in
    --format | -f)
      if [[ ! -v 2 || -z "$2" ]]; then
        >&2 echo "Please provide a format type"
        exit 1
      fi
      format="$2"
      shift 2
      ;;
    *)
      positional+=("$1")
      shift
      ;;
    esac
  done

  set -- "${positional[@]}"

  code=""

  if [[ $# -gt 1 ]]; then
    >&2 echo "Please enter one color at a time"
    exit 1
  elif [[ $# -eq 0 ]]; then
    code="$(_fzf --accept-nth 2)"
  else
    code="$(_get_code_by_name "$1")"
    if [[ $? -gt 0 ]]; then
      >&2 echo "Valid color names: "
      echo "$colors" | tail -n +2 | choose 0 | column >&2
      exit 1
    fi
  fi

  _apply_format "$code"
}

main "$@"
